// This file was automatically generated by the OSHI API generator; do not edit!
package oshi.api.hardware.nic;

import java.lang.Override;
import oshi.api.DetachedContainerException;
import oshi.api.hardware.nic.internal.NicAttribute;
import oshi.driver.ComponentDriver;

/**
 * A network interface
 */
public abstract class NicContainer implements Nic {
  private transient ComponentDriver driver;

  /**
   * The interface's name
   */
  public String name;

  /**
   * The interface's description
   */
  public String description;

  /**
   * The maximum transmission unit
   */
  public Integer mtu;

  public String mac;

  public Boolean virtual;

  /**
   * The interface's IPv4 addresses
   */
  public String[] ipv4;

  /**
   * The interface's IPv6 addresses
   */
  public String[] ipv6;

  public String broadcast;

  /**
   * The interface's subnet mask
   */
  public String netmask;

  /**
   * The number of bytes read from the interface
   */
  public Long readBytes;

  /**
   * The number of bytes written to the interface
   */
  public Long writeBytes;

  /**
   * The number of packets read from the interface
   */
  public Long readPackets;

  /**
   * The number of packets written to the interface
   */
  public Long writePackets;

  /**
   * The number of read errors
   */
  public Long readErrors;

  /**
   * The number of write errors
   */
  public Long writeErrors;

  /**
   * The number of read drops
   */
  public Long readDrops;

  /**
   * The number of write drops
   */
  public Long writeDrops;

  /**
   * The number of write collisions
   */
  public Long writeCollisions;

  /**
   * The interface's maximum speed in bytes
   */
  public Long linkSpeed;

  public Boolean defaultGateway;

  public Boolean flagUp;

  public Boolean flagRunning;

  public Boolean flagLoopback;

  public Boolean flagMulticast;

  @Override
  public String getName() {
    return name;
  }

  @Override
  public String getDescription() {
    return description;
  }

  @Override
  public Integer getMtu() {
    return mtu;
  }

  @Override
  public Integer queryMtu() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.MTU);
    return mtu;
  }

  @Override
  public String getMac() {
    return mac;
  }

  @Override
  public String queryMac() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.MAC);
    return mac;
  }

  @Override
  public Boolean getVirtual() {
    return virtual;
  }

  @Override
  public Boolean queryVirtual() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.VIRTUAL);
    return virtual;
  }

  @Override
  public String[] getIpv4() {
    return ipv4;
  }

  @Override
  public String[] queryIpv4() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.IPV4);
    return ipv4;
  }

  @Override
  public String[] getIpv6() {
    return ipv6;
  }

  @Override
  public String[] queryIpv6() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.IPV6);
    return ipv6;
  }

  @Override
  public String getBroadcast() {
    return broadcast;
  }

  @Override
  public String queryBroadcast() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.BROADCAST);
    return broadcast;
  }

  @Override
  public String getNetmask() {
    return netmask;
  }

  @Override
  public String queryNetmask() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.NETMASK);
    return netmask;
  }

  @Override
  public Long getReadBytes() {
    return readBytes;
  }

  @Override
  public Long queryReadBytes() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.READ_BYTES);
    return readBytes;
  }

  @Override
  public Long getWriteBytes() {
    return writeBytes;
  }

  @Override
  public Long queryWriteBytes() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.WRITE_BYTES);
    return writeBytes;
  }

  @Override
  public Long getReadPackets() {
    return readPackets;
  }

  @Override
  public Long queryReadPackets() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.READ_PACKETS);
    return readPackets;
  }

  @Override
  public Long getWritePackets() {
    return writePackets;
  }

  @Override
  public Long queryWritePackets() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.WRITE_PACKETS);
    return writePackets;
  }

  @Override
  public Long getReadErrors() {
    return readErrors;
  }

  @Override
  public Long queryReadErrors() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.READ_ERRORS);
    return readErrors;
  }

  @Override
  public Long getWriteErrors() {
    return writeErrors;
  }

  @Override
  public Long queryWriteErrors() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.WRITE_ERRORS);
    return writeErrors;
  }

  @Override
  public Long getReadDrops() {
    return readDrops;
  }

  @Override
  public Long queryReadDrops() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.READ_DROPS);
    return readDrops;
  }

  @Override
  public Long getWriteDrops() {
    return writeDrops;
  }

  @Override
  public Long queryWriteDrops() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.WRITE_DROPS);
    return writeDrops;
  }

  @Override
  public Long getWriteCollisions() {
    return writeCollisions;
  }

  @Override
  public Long queryWriteCollisions() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.WRITE_COLLISIONS);
    return writeCollisions;
  }

  @Override
  public Long getLinkSpeed() {
    return linkSpeed;
  }

  @Override
  public Long queryLinkSpeed() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.LINK_SPEED);
    return linkSpeed;
  }

  @Override
  public Boolean getDefaultGateway() {
    return defaultGateway;
  }

  @Override
  public Boolean queryDefaultGateway() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.DEFAULT_GATEWAY);
    return defaultGateway;
  }

  @Override
  public Boolean getFlagUp() {
    return flagUp;
  }

  @Override
  public Boolean queryFlagUp() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.FLAG_UP);
    return flagUp;
  }

  @Override
  public Boolean getFlagRunning() {
    return flagRunning;
  }

  @Override
  public Boolean queryFlagRunning() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.FLAG_RUNNING);
    return flagRunning;
  }

  @Override
  public Boolean getFlagLoopback() {
    return flagLoopback;
  }

  @Override
  public Boolean queryFlagLoopback() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.FLAG_LOOPBACK);
    return flagLoopback;
  }

  @Override
  public Boolean getFlagMulticast() {
    return flagMulticast;
  }

  @Override
  public Boolean queryFlagMulticast() {
    if (driver == null) {
      throw new DetachedContainerException();
    }
    driver.query(NicAttribute.FLAG_MULTICAST);
    return flagMulticast;
  }

  public void attach(ComponentDriver driver) {
    this.driver = driver;
    // Query all constant attributes:
    driver.query(NicAttribute.NAME);
    driver.query(NicAttribute.DESCRIPTION);
  }
}
